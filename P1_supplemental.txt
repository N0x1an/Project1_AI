Answer questions marked as "QS"
Group members: Yuki Zheng, Jishan Rahman

QS1.1: For DFS, we use a stack data structure. A stack follows a Last In, First Out (LIFO) order, meaning the most recently discovered node is expanded first.
 In DFS, we explore as far as possible along a branch before backtracking, which ensures deep exploration before moving to sibling nodes. 
 This structure is ideal for DFS because it naturally handles recursion and backtracking.

QS1.2: Pacman does not go through all the nodes expanded on his way to the goal. Which is something I did not expect, I expected seeing it go through each branch but in use it showed where it had expanded by the red hue on the board then went along the correct path.
 This happens because DFS explores the deepest parts of each branch first and may explore unnecessary paths before finding the goal. 
 Once the goal is found, Pacman follows the final discovered path directly, ignoring previously explored nodes because they were considered but found to be incorrect.

QS2.1: For BFS we use a queue data structure. A queue follows a First In First Out (FIFO) order, this is used to keep track of explored nodes level by level. Then once one level is fully explored, we move on to the next level down the tree. 
 With a queue our pacman ensures that we go level by level because it ensures that we visit all the nodes at the current level before moving on to the next level deeper level of the tree.

QS3.1: The cost function we made prioritizes paths based on the total accumulated cost from the start state. 
 To do this we maintain a priority queue that expands the node with the lowest total path cost first. To store those cheapest known paths we used a dictionary "ucs_visited = {}"
 If we encounter a node we already visited with a lower cost then before then we update the cost and reprocess it. 
 The factors we considered were:
 - Step cost: By the successor function we used the cost of moving to a new node
 - Cumulative cost: Tracks the total cost to reach a node from the start node
 - Priority Queue Ordering: We used a priority queue to order the nodes by their cumulative cost, so we always expand the node with the lowest cumulative cost first
The weight considerations we took were:
 - Every step cost needed to be treated equally: This is because we are trying to find the shortest path and every step is equally important
 - No hueristics being used: UCS expands a lot more nodes compared to A*, but UCS still finds an optimal solution everytime

QS4.1: difference bewteen nullHueristic and Manhattan distance hueristic is that nullHueristic is a function that always returns 0, which means its not giving any information about the distance to the goal or any guidance to it.
 Manhattan distance hueristic calculates the absolute difference in the x and y coordinates between the current state and goal.
 This means that it is giving information about the distance to the goal and is guiding the search towards it by finding the shortest path in the grid environment
 nullHueristic does give the optimal solution but it is not efficient because it expands a lot of nodes before finding the goal. Like A* it is very costly and slower but its not improving the efficiency of the searching.

Q4.2 is in the assignment details but we are told to only answer QS questions.

QS5.1: 


QS5.2:


QS6.1: We used a hueristic that estimated the minimum cost to visit each remaining unvisited corner in CornersProblem. The way we made it work was by finding the nearest unvisited corner from Pacman's current location
 using the Manhattan distance. We then added the cost of reaching that corner to the cost of reaching the current corner.
 We approximated the shortest possible path to visit all the unvisted corners with a greedy approach, always choosing the closest unvisited corner to visit next
 The last factor of our hueristic value was the sum of the Manhattan distance to the nearest corner and the estimated travel cost to visit all other unvisited corners.

 The Pros and Cons of our chosen hueristic are:
 Pros: 
  - It is admissable, the hueristic never overestimates the cost to reach the goal
  - It is consistent, the hueristic always returns the same value for the same state
  - It is efficient, there is a reduction in the number of expanded nodes in this hueristic compared to UCS
  Cons:
  - It is not optimal for complex mazes, the hueristic may not always find the shortest path to the goal but does not compute the exact optimal order to visit the remaining corners
  - It has potential for performance variations, this is because the hueristic is greedy and may not always choose the best next corner to visit and if the corners are placed in difficult to reach layout there may be more expanded nodes than optimal

Our hueristic is consistent because when moving from one state to anoter there is never a decrease in the hueristic by more than the cost of the move, if our Pacman moved 1 square closer to a corner then the hueristic
would decrease by at most 1, which matches the move cost. If there is a state where there is no unvisted corners then the hueristic is 0, which maintains consistency.

QS7.1:
